apiVersion: apps/v1                                           # v1 Which version of the Kubernetes API you're using to create this object
kind: Deployment                                              # What kind of object you want to create [Deployment,Job, Pod,Service...]  here desire state of system
metadata:                                                     # Helps uniquely identify the object [name,UID,namespace(optional)]
  name: wordpress                                             # Specify the name of the Development (unique in the same namespace)
  labels:                                                    
    app: wordpress                                            # Labels are key-value pairs used to attach identifying metadata to Kubernetes objects
spec:                                                         # The desire state for the object
  selector:                                                   # `.spec.selector` field defines how the Deployment finds which Pods to manage.
    matchLabels:
      app: wordpress                                          # In this case, select a label that is defined in the Pod template (app: wordpress).
  template:                                                   # Defination of Pod
    metadata:
      labels:
        app: wordpress　　　　　　　　　　　　　　　　　　　　   # Label of Pod
    spec:                                                     # Specification of the te
      containers:                                             # Create a container namend "web" which uses an image "gcr.io/cloud-marketplace/google/wordpress" 
        - name: web                                           # to run the sample application
          image: gcr.io/cloud-marketplace/google/wordpress  
          #image: wordpress:4.8.2-apache
          ports:
            - containerPort: 80                               # Container will listen internally (80)
          env:                                                # Note. The environment variables set using the env or envFrom field override any environment variables specified in the container image.
            - name: WORDPRESS_DB_HOST
              value: 127.0.0.1:3306
            # These secrets are required to start the pod.
            # [START cloudsql_secrets]
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: sql-credentials
                  key: username
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sql-credentials
                  key: password
            # [END cloudsql_secrets]
        # Change <INSTANCE_CONNECTION_NAME> here to include your GCP
        # project, the region of your Cloud SQL instance and the name
        # of your Cloud SQL instance. The format is
        # $PROJECT:$REGION:$INSTANCE
        # [START proxy_container]
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=<INSTANCE_CONNECTION_NAME>=tcp:3306",
                    "-credential_file=/secrets/cloudsql/key.json"]
          # [START cloudsql_security_context]
          securityContext:
            runAsUser: 2                                       # Non-root use. runAsUser field specifies that for any Containers in the Pod, all processes run with user ID 2.
            allowPrivilegeEscalation: false                    # Controls whether a process can gain more privileges than its parent process.
          # [END cloudsql_security_context]
          volumeMounts:                                        # Mount configmaps or secrets as files in the pod's container runtime.
            - name: cloudsql-instance-credentials              # Mount the created volume
              mountPath: /secrets/cloudsql
              readOnly: true
        # [END proxy_container]
      # [START volumes]
      volumes:                                                 # Add a volume for the secret
        - name: cloudsql-instance-credentials
          secret:
            secretName: google-credentials
      # [END volumes]

# ↓　Optional, a separator which can define mutiple structures in a single file
# Never use tabs in a YAML file
# `-` which defines as items
---                                                                         
apiVersion: "v1"                
kind: "Service"
metadata:
  name: "wordpress-service"
  namespace: "default"
  labels:
    app: "wordpress"
spec:
  ports:
  - protocol: "TCP"
    port: 80
  selector:
    app: "wordpress"
  type: "LoadBalancer"
  loadBalancerIP: ""